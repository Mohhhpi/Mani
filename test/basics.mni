/*
Testing all the basics of the language
*/
load "munit";

let t <- newTester();
t.header("Basics");

let x = 0;

x <- 1;
t.assertEquals(x, 1, "<- assign operator");

x << 0;
t.assertEquals(x, 0, "<< assign operator");

x = x + 1;
t.assertEquals(x, 1, "+ operator");

x++;
t.assertEquals(x, 2, "++ after opeator");

++x;
t.assertEquals(x, 4, "++ before operator");

x = x - 1;
t.assertEquals(x, 3, "- operator");

x--;
t.assertEquals(x, 2, "-- after operator");

--x;
t.assertEquals(x, 0, "-- before operator");

x += 43;
t.assertEquals(x, 43, "+= operator");

x -= 3;
t.assertEquals(x, 40, "-= operator");

x = x % 3;
t.assertEquals(x, 1, "% operator");

x++;
x = x ** 2;
t.assertEquals(x, 4, "** power operator");

x = x * 2;
t.assertEquals(x, 8, "* operator");

x = x / 4;
t.assertEquals(x, 2, "/ operator");

let y = nil;
x -> y;
t.assertEquals(y, 2, "-> copy operator");

/*
x = "String";
x -> y;
x = "String1";
t.assertEquals(y, x, "-> copy operator changing");*/

{
    x = 10;
    let z = "test";
}
t.assertEquals(x, 10, "block statement");

t.results();