/*
Test program to demonstrate all
functionality using lists
*/
load "munit";
//Import lists library
# "lists";

let t <- newTester();
t.header("Lists");

//Create a new list
let myList = List();
t.assertEquals(myList.list, [], "Create new list");


//Add a string to the list
myList.add("stringOne");
t.assertEquals(myList.list, ["stringOne"], "Add item to list");

myList.addLots(["stringTwo", "stringThree"]);
t.assertEquals(myList.list, ["stringOne", "stringTwo", "stringThree"], "Testing add lots function");

let reversedArray = myList.reverse();
t.assertEquals(reversedArray, ["stringThree", "stringTwo", "stringOne"], "Reversing an array");

//Add a different type to the list and show
myList.add(2);
t.assertEquals(myList.list, ["stringOne", "stringTwo", "stringThree", 2], "Adding a number");

//Replace an item in the list
myList.replace(1, "replacementString");
t.assertEquals(myList.list, ["stringOne", "replacementString", "stringThree", 2], "Replace item in list");


//Delete an item
myList.del(1);
t.assertEquals(myList.list, ["stringOne", "stringThree", 2], "Delete item");

myList.reset();
t.assertEquals(myList.list, [], "Reseting list");

myList.add("      spaceThenString");
myList.add("stringThenSpace     ");
myList.trimEach();
t.assertEquals(myList.list, ["spaceThenString", "stringThenSpace"], "String trimming");

let directList = [1,2,3,4];
let norm = List();

norm.direct(directList);
t.assertEquals(norm.list, directList, "Direct listing");

// This is the function we want to run each time.
let r <- List();
r.addLots([1, 2, 3, 4]);
fn someFunction(item) {
    result.add(item);
}

let result <- [];
r.forEach(someFunction); // This will run the "someFunction" parsing the data from the position in the list.
t.assertEquals(r.list, result, "Testing forEach function");

t.results();
