/*
Test program to demonstrate all
functionality using maps
*/
load "munit";
# "maps";
# "lists";

let t <- newTester();

t.header("Maps");

let myMap = Map();
t.assertEquals(myMap.map, {}, "Creating map");

myMap.add("keyName1","valueName1");
myMap.add("keyName2","valueName2");
t.assertEquals(myMap.map, {"keyName1" : "valueName1", "keyName2" : "valueName2"}, "Adding keys");

let item = myMap.get("keyName2");
t.assertEquals(item, "valueName2", "Get key");

let listOfKeys = List();
listOfKeys.direct(myMap.getKeys());
t.assertEquals(listOfKeys.list, ["keyName1", "keyName2"], "List of keys");

t.assertEquals(myMap.size(), 2, "Size of map");

let mapExists = myMap.exists("keyName1");
t.assertEquals(mapExists, true, "Check for existing key");

mapExists = myMap.exists("nonExistentKey");
t.assertEquals(mapExists, false, "Check for non-existing key");


// Combine two lists into a map
// Both Lists must be the same length.
let keys = List(); // The keys of the map.
let vals = List(); // The values of the map.

// Filling the 2 lists with values...
keys.addLots([1, 3, 5, 7, 9]);
vals.addLots([2, 4, 6, 8, 10]);

// Using keys List, as the keys.
// Using the vals List, as the values.
let mapToTest = Map();
mapToTest.combine(keys, vals); // changes the contents of the map to these keys and values.
t.assertEquals(mapToTest.map, {1 : 2, 3 : 4, 5 : 6, 7 : 8, 9 : 10}, "Checking combine function of 2 lists");

mapToTest.del(1);
t.assertEquals(mapToTest.map, {3 : 4, 5 : 6, 7 : 8, 9 : 10}, "Deleting item");

let values = mapToTest.getValues();
t.assertEquals(values, [10, 6, 4, 8], "Get values");

mapToTest.update(3,"update");
t.assertEquals(mapToTest.map, {9.0 : 10.0, 5.0 : 6.0, 3.0 : "update", 7.0 : 8.0}, "Updating an item");

myMap.copy(mapToTest);
t.assertEquals(myMap.map, {9.0 : 10.0, 5.0 : 6.0, 3.0 : "update", 7.0 : 8.0}, "Copying a map");

t.assertEquals(mapToTest.map, {9.0 : 10.0, 5.0 : 6.0, 3.0 : "update", 7.0 : 8.0}, "Show a map");

mapToTest.reset();
t.assertEquals(mapToTest.map, {}, "Reset a map");

let anotherMap = Map();
let dMap1 = Map();
let dMap2 = Map();

dMap1.add("test", "name");
dMap2.add("test", "name1");
anotherMap.add("first", dMap1);
anotherMap.add("second", dMap2);
t.assertEquals(anotherMap.find("test", "name"), dMap1, "Map search");


t.results();
